@file:Suppress("MemberVisibilityCanBePrivate", "unused")

package utils

import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.jsonArray
import kotlinx.serialization.json.jsonObject
import net.dv8tion.jda.api.EmbedBuilder
import net.dv8tion.jda.api.JDA
import net.dv8tion.jda.api.entities.*
import net.dv8tion.jda.api.entities.emoji.Emoji
import net.dv8tion.jda.api.interactions.commands.Command
import net.dv8tion.jda.api.interactions.components.buttons.Button
import org.fusesource.jansi.Ansi.ansi
import java.awt.Color
import java.net.URL
import java.time.Instant
import java.time.temporal.TemporalAccessor
import java.util.*
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import kotlin.io.path.*
import kotlin.system.exitProcess


class NekoCLIApi {

    fun insertValueInFile(fileName: String, value: String) {
        val file = Path("resources/$fileName")
        if (file.exists()) {
            try {
                if(file.readText().contains(value)) {
                    println("[NekoCLIWorker] Value already exists in file!")
                } else {
                    file.appendText("$value\n")
                    println("[NekoCLIWorker] Value $value inserted in file!")
                }
            } catch (e: Exception) {
                println("[NekoCLIWorker] Error while inserting value in file: $e")
            }
        }
    }

    fun insertIntoJsonFile(fileName: String, key: String, value: String) {
        val file = Path("resources/$fileName")
        if (file.exists()) {
            try {
                if(file.readText().contains(key)) {
                    println("[NekoCLIWorker] Value already exists in file!")
                } else {
                    file.appendText("\"$key\": \"$value\",\n")
                    println("[NekoCLIWorker] Value :$value inserted in file as $key!")
                }
            } catch (e: Exception) {
                println("[NekoCLIWorker] Error while inserting value in file: $e")
            }
        }
    }

    fun insertCommentIntoJsonFile(fileName: String, comment: String) {
        val file = Path("resources/$fileName")
        if (file.exists()) {
            try {
                file.appendText("// $comment\n")
                println("[NekoCLIWorker] Comment $comment inserted in file!")
            } catch (e: Exception) {
                println("[NekoCLIWorker] Error while inserting comment in file: $e")
            }
        }
    }

    fun createCustomFile(fileName: String) {
        val file = Path("resources/$fileName")
        if (!file.exists()) {
            file.createFile()
            insertValueInFile(".env", "TOKEN=INSERT-THE-TOKEN-HERE")
            insertValueInFile(".env", "GITTOKEN=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")
            insertCommentIntoJsonFile("config.json", "This is the config file for NekoCLIWorker, please do not edit this file unless you know what you are doing.")
            insertCommentIntoJsonFile("config.json", "If you want to add a new config value, please use the insertIntoJsonFile function in the NekoCLIApi class.")
            insertCommentIntoJsonFile("config.json", " - Generic Section - ")
            insertIntoJsonFile("config.json", "GUILDID", "1312749868200099901")
            insertIntoJsonFile("config.json", "LOGCHANNELID", "1322492054408007721")
            insertIntoJsonFile("config.json", "WEBSITE", "https://neko-cli.unstackss.dev")
            insertIntoJsonFile("config.json", "WORKERCOLOR", "0x2473f5")
            insertIntoJsonFile("config.json", "PASSWORD", "Hwdcop5625010----------")
            insertIntoJsonFile("config.json", "FTTACCESSID", "1322601930756853921")
            insertIntoJsonFile("config.json", "FORUMCHANNELID", "1313230048479678514")
            insertIntoJsonFile("config.json", "STAFFCHANNELID", "1313245589647130674")
            insertIntoJsonFile("config.json", "HRQUESTIONS", "1322506036233502721")
            insertIntoJsonFile("config.json", "ANNOUNCEMENTCHANNELID", "1313229419351117844")
            insertIntoJsonFile("config.json", "SUGGESTIONSCHANNELID", "1322891190315651134")
            insertIntoJsonFile("config.json", "BUGREPORTSCHANNELID", "1322891350974136331")
            insertIntoJsonFile("config.json", "FACTOFDAYCHANNELID", "1322902342412013619")
            insertIntoJsonFile("config.json", "ANNOUNCEMENTCHANNELID", "1313229419351117844")
            insertIntoJsonFile("config.json", "WELCOMECHANNELID", "1313229418197549076")
            insertIntoJsonFile("config.json", "DISCORDSERVER", "https://nekods.unstackss.dev/")
            insertIntoJsonFile("config.json", "EVERYONEID", "1312749868200099901")
            insertIntoJsonFile("config.json", "VERIFICATIONROLEID", "1313229393795092570")
            insertIntoJsonFile("config.json", "UNVERIFIEDROLEID", "1313521554474270742")
            insertIntoJsonFile("config.json", "SERVERIMAGE", "https://i.imgur.com/CbI1FBJ.png")
            insertCommentIntoJsonFile("config.json", " - MySQL Section - ")
            insertIntoJsonFile("config.json", "HOST", "localhost")
            insertIntoJsonFile("config.json", "PORT", "3306")
            insertIntoJsonFile("config.json", "DATABASE", "exampledatabase")
            insertIntoJsonFile("config.json", "USERNAME", "exampleusername")
            insertIntoJsonFile("config.json", "PASSWORDMYSQL", "examplepassword")
        }
    }

    fun getFileValueReadText(fileName: String): String {
        val file = Path("resources/$fileName")
        if (file.exists()) {
            return file.readText()
        }
        return ""
    }

    fun createResourcesFolder() {
        val resourcesFolder = Path("resources")
        if (!resourcesFolder.exists()) {
            resourcesFolder.createDirectory()
            createCustomFile(".env")
            createCustomFile("config.json")
        }
    }






    fun getEnv(value: String): String {
        return getFileValueReadText(".env").split("\n").find { it.startsWith(value) }!!.split("=")[1]
    }

    fun getConfig(value: String): String {
        val configText = getFileValueReadText("config.json")
        val regex = Regex("\"$value\":\\s*\"(.*?)\"")
        val match = regex.find(configText)
        return match?.groups?.get(1)?.value ?: throw IllegalArgumentException("Config key '$value' not found in config.json")
    }

    @Serializable
    data class Sponsors(val count: Int)

    @OptIn(DelicateCoroutinesApi::class)
    fun autoActivity(nekocli: JDA) {
        Timer().scheduleAtFixedRate(object : TimerTask() {
            override fun run() {
                GlobalScope.launch {
                    val sponsorCount = getSponsorCount()
                    when ((0..1).random()) {
                        0 -> nekocli.presence.activity = Activity.watching("$sponsorCount sponsors")
                        1 -> nekocli.presence.activity = Activity.watching("do /help")
                    }
                }
            }
        }, 0, 5000)
    }

    suspend fun getSponsorCount(): Int {
        return withContext(Dispatchers.IO) {
            try {
                val jsonString = URL("https://raw.githubusercontent.com/Neko-CLI/SponsorsJson/refs/heads/main/sponsors.json")
                    .readText()
                val jsonArray = Json.parseToJsonElement(jsonString).jsonArray
                jsonArray.count { it.jsonObject.containsKey("name") }
            } catch (e: Exception) {
                println("Error fetching sponsor count: ${e.message}")
                0
            }
        }
    }

    fun sendHelpButtons(): MutableList<Button> {
        val buttons = mutableListOf<Button>()
        buttons.add(Button.link("https://neko-cli.unstackss.dev", "Website").withEmoji(Emoji.fromUnicode("üåê")))
        buttons.add(Button.link("https://nekods.unstackss.dev/", "Discord").withEmoji(Emoji.fromUnicode("üì¢")))
        buttons.add(Button.link("https://github.com/Neko-CLI/", "GitHub").withEmoji(Emoji.fromUnicode("üêà‚Äç‚¨õ")))
        return buttons
    }

    fun sendQuestionToHR(): MutableList<Button> {
        val buttons = mutableListOf<Button>()
        buttons.add(Button.primary("sqthr", "Ask HR Your Questions").withEmoji(Emoji.fromUnicode("üôã‚Äç‚ôÇÔ∏è")))
        return buttons
    }

    fun getUserById(jda: JDA, id: String): User? {
        return jda.getUserById(id)
    }

    fun sendPrivateMessage(nekocli: JDA, user: User, message: String, title: String) {
        user.openPrivateChannel().queue { channel ->
            channel.sendMessageEmbeds(
                EmbedBuilder()
                    .setTitle(title)
                    .setDescription(message)
                    .setColor(Color.decode(getConfig("WORKERCOLOR")))
                    .setAuthor(nekocli.selfUser.name)
                    .setImage(getConfig("SERVERIMAGE"))
                    .setTimestamp(Instant.now())
                    .build()
            ).queue()
        }
    }

    fun preventLag() {
        val scheduler = Executors.newScheduledThreadPool(1)
        scheduler.scheduleAtFixedRate({
            try {
                System.gc()
            } catch (e: Exception) {
                println("${ansi().fgBrightRed()}[Error]${ansi().reset()} Failed to run garbage collection: ${e.message}")
            }
        }, 0, 1, TimeUnit.SECONDS)
    }

    fun stopTheBot(nekocli: JDA){
        nekocli.shutdown()
        exitProcess(0)
    }

    fun isUnStackss(id: String): Boolean {
        return id == "1131965612890005626"
    }

    fun getChannel(jda: JDA, guildId: String, channelId: String): String {
        val guild = jda.getGuildById(guildId)
        if (guild == null) {
            println(ansi().fgBrightRed().a("[Error]").reset().a(" Guild with ID $guildId not found."))
            return "Guild not found."
        }

        val textChannel = guild.getTextChannelById(channelId)
        if (textChannel == null) {
            println(ansi().fgBrightRed().a("[Error]").reset().a(" TextChannel with ID $channelId not found in guild $guildId."))
            return "Channel not found."
        }

        return textChannel.asMention
    }


    fun sendEmbedMessageInChannel(jda: JDA, channelId: String, title: String, description: String?, authorName: String, authorURL: String, authorIconURL: String?, timestamp: TemporalAccessor){
        jda.getTextChannelById(channelId)!!.sendMessageEmbeds(
            EmbedBuilder()
                .setTitle(title)
                .setDescription(description)
                .setColor(Color.decode(getConfig("WORKERCOLOR")))
                .setImage(getConfig("SERVERIMAGE"))
                .setAuthor(
                    authorName,
                    authorURL,
                    authorIconURL
                )
                .setTimestamp(timestamp)
                .build()
        ).queue()
    }

    fun sendEmbedMessageInAnnounceChannel(jda: JDA, channelId: String, title: String, description: String?, authorName: String, authorURL: String, authorIconURL: String?, timestamp: TemporalAccessor){
        val newsChannel = jda.getNewsChannelById(channelId)
        if (newsChannel == null) {
            println(ansi().fgBrightBlue().a("[").reset().a("NekoCLIWorker").fgBrightBlue().a("]").reset().fgBrightGreen().a(" NewsChannel with ID $channelId not found.").reset())
            return
        }
        val embed = EmbedBuilder()
            .setTitle(title)
            .setDescription(description)
            .setColor(Color.decode(getConfig("WORKERCOLOR")))
            .setAuthor(authorName, authorURL, authorIconURL)
            .setTimestamp(timestamp)
            .build()
        newsChannel.sendMessageEmbeds(embed).queue { message ->
            message.crosspost().queue()
        }
    }
    fun getTimestamp(): TemporalAccessor {
        return Date().toInstant()
    }

    @Suppress("MemberVisibilityCanBePrivate")
    fun userToMember(jda: JDA, userId: String): Member {
        return jda.getGuildById(getConfig("GUILDID"))!!.getMemberById(userId)!!
    }

    fun addRole(jda: JDA, guildId: String, target: UserSnowflake, roleId: String) {
        jda.getGuildById(guildId)!!.addRoleToMember(target, jda.getRoleById(roleId)!!).queue()
    }

    fun removeRole(jda: JDA, guildId: String, target: UserSnowflake, roleId: String) {
        jda.getGuildById(guildId)!!.removeRoleFromMember(target, jda.getRoleById(roleId)!!).queue()
    }

    fun discordInvite(): String {
        return getConfig("DISCORDSERVER")
    }

    fun getRoleByName(jda: JDA, guildId: String, roleName: String): Role {
        return jda.getGuildById(guildId)!!.getRolesByName(roleName, true)[0]
    }

    fun hasRole(jda: JDA, guildId: String, target: UserSnowflake, roleId: String): Boolean {
        return jda.getGuildById(guildId)!!.getMemberById(target.id)!!.roles.contains(jda.getRoleById(roleId)!!)
    }

    fun codeMessage(message: String, language: String): String {
        return "```${language}\n$message\n```"
    }

    fun getAllCommands(jda: JDA): List<Command> {
        return jda.retrieveCommands().complete()
    }
}