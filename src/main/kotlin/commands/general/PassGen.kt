@file:Suppress("NullableBooleanElvis", "SpellCheckingInspection")

package commands.general

import net.dv8tion.jda.api.EmbedBuilder
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent
import net.dv8tion.jda.api.hooks.ListenerAdapter
import utils.NekoCLIApi
import java.awt.Color
import java.security.SecureRandom
import java.time.Instant
import java.time.ZoneId
import java.time.format.DateTimeFormatter

class PassGen : ListenerAdapter() {

    private val random = SecureRandom()
    private val api = NekoCLIApi()

    override fun onSlashCommandInteraction(event: SlashCommandInteractionEvent) {
        if (event.name != "passgen") return

        val maxChar = event.getOption("maxchar")?.asInt ?: 12
        val includeUppercase = event.getOption("uppercase")?.asBoolean ?: true
        val includeLowercase = event.getOption("lowercase")?.asBoolean ?: true
        val includeNumbers = event.getOption("numbers")?.asBoolean ?: true
        val includeSymbols = event.getOption("symbols")?.asBoolean ?: true
        val characterType = event.getOption("type")?.asString ?: "All characters"

        if (maxChar > 1000) {
            event.reply("‚ùå Maximum character limit is 1000.").setEphemeral(true).queue()
            return
        }

        val password = generatePassword(maxChar, includeUppercase, includeLowercase, includeNumbers, includeSymbols, characterType)
        val timestamp = Instant.now().atZone(ZoneId.systemDefault()).format(DateTimeFormatter.ofPattern("dd/MM/yyyy - HH:mm"))

        val embed = EmbedBuilder()
            .setTitle("üîë Your Generated Password")
            .setDescription("**```$password```**")
            .addField("Settings", """
                **Uppercase:** $includeUppercase
                **Lowercase:** $includeLowercase
                **Numbers:** $includeNumbers
                **Symbols:** $includeSymbols
                **Type:** $characterType
            """.trimIndent(), false)
            .setFooter("Generated by ${event.user.asTag} on $timestamp")
            .setColor(Color.decode(api.getConfig("WORKERCOLOR")))
            .build()

        event.user.openPrivateChannel().queue { channel ->
            channel.sendMessageEmbeds(embed).queue(
                { event.reply("‚úÖ Password sent to your private messages!").setEphemeral(true).queue() },
                { event.reply("‚ùå Could not send a private message. Please check your settings.").setEphemeral(true).queue() }
            )
        }
    }

    private fun generatePassword(
        maxChar: Int,
        includeUppercase: Boolean,
        includeLowercase: Boolean,
        includeNumbers: Boolean,
        includeSymbols: Boolean,
        characterType: String
    ): String {
        val uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        val lowercase = "abcdefghijklmnopqrstuvwxyz"
        val numbers = "0123456789"
        val symbols = "!@#$%^&*()-_=+[]{}|;:,.<>?/"

        var charPool = ""

        if (includeUppercase) charPool += uppercase
        if (includeLowercase) charPool += lowercase
        if (includeNumbers) charPool += numbers
        if (includeSymbols) charPool += symbols

        if (charPool.isEmpty()) {
            throw IllegalArgumentException("At least one character type must be selected.")
        }

        charPool = when (characterType) {
            "Easy to say" -> charPool.replace("[il1Lo0O]".toRegex(), "")
            "Easy to read" -> charPool.replace("[{}|:;,.<>!?()\\[\\]\"]".toRegex(), "")
            else -> charPool
        }

        return (1..maxChar)
            .map { charPool[random.nextInt(charPool.length)] }
            .joinToString("")
    }
}
